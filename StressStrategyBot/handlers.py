from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import Database
from utils import calculate_results, show_progress_animation, format_results_message
import random
import logging

# Configure logging
logger = logging.getLogger(__name__)

db = Database()

# –ü–æ–¥–±–∞–¥—Ä–∏–≤–∞—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏
ENCOURAGEMENT_MESSAGES = [
    "–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º...",
    "–•–æ—Ä–æ—à–∏–π –æ—Ç–≤–µ—Ç! –ò–¥—ë–º –¥–∞–ª—å—à–µ...",
    "–¢—ã –º–æ–ª–æ–¥–µ—Ü! –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å...",
    "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤—ã–±–æ—Ä! –î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ...",
    "–£–∂–µ –ø–æ—á—Ç–∏ –ø–æ–ª–æ–≤–∏–Ω–∞ –ø—Ä–æ–π–¥–µ–Ω–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ...",
    "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è! –ü—Ä–æ–¥–æ–ª–∂–∏–º...",
    "–û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ! –¢—ã –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è...",
    "–ö–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –Ω–∞—Å –∫ –ø–æ–Ω–∏–º–∞–Ω–∏—é —Ç–≤–æ–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...",
    "–û—Ç–ª–∏—á–Ω–æ –ø—Ä–æ–¥–≤–∏–≥–∞–µ–º—Å—è! –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å..."
]

async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        user_id = update.effective_user.id
        user_name = update.effective_user.first_name or "–≥–æ—Å—Ç—å"
        logger.info(f"Start command received from user {user_id}")

        db.start_user_session(user_id)

        welcome_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
            "–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–≤–æ–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤ —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö.\n"
            "–¢–µ–±–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –æ—Ü–µ–Ω–∏–≤–∞—è –∫–∞–∂–¥–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5:\n\n"
            "1 - –ü–æ—á—Ç–∏ –Ω–∏–∫–æ–≥–¥–∞\n"
            "2 - –†–µ–¥–∫–æ\n"
            "3 - –ò–Ω–æ–≥–¥–∞\n"
            "4 - –ß–∞—Å—Ç–æ\n"
            "5 - –ü–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞\n\n"
            "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –ù–∞–∂–º–∏ /next –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞!"
        )

        await update.message.reply_text(welcome_text)
        logger.info(f"Welcome message sent to user {user_id}")
    except Exception as e:
        logger.error(f"Error in start_handler: {str(e)}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

async def send_question(message, current_q: int, questions: list) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton(str(i), callback_data=f"answer_{i}") for i in range(1, 6)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        question_text = f"–í–æ–ø—Ä–æ—Å {current_q + 1}/{len(questions)}:\n{questions[current_q]['question']}"

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        total = len(questions)
        progress = int((current_q + 1) / total * 10)
        progress_bar = "‚ñì" * progress + "‚ñë" * (10 - progress)
        question_text += f"\n\n–ü—Ä–æ–≥—Ä–µ—Å—Å: [{progress_bar}] {int((current_q + 1) / total * 100)}%"

        await message.reply_text(question_text, reply_markup=reply_markup)
        logger.info(f"Question {current_q + 1} sent successfully")
    except Exception as e:
        logger.error(f"Error in send_question: {str(e)}", exc_info=True)
        await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /next –µ—â–µ —Ä–∞–∑.")

async def next_question_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        user_id = update.effective_user.id
        user_name = update.effective_user.first_name or "–≥–æ—Å—Ç—å"
        session = db.get_user_session(user_id)
        logger.info(f"Next command received from user {user_id}")

        if not session:
            await update.message.reply_text(f"{user_name}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Ç–µ—Å—Ç —Å –∫–æ–º–∞–Ω–¥—ã /start")
            return

        questions = db.get_questions()
        current_q = session["current_question"]

        if current_q >= len(questions):
            await show_progress_animation(update.message)
            results = calculate_results(session["answers"], questions)
            dominant_strategy = max(results.items(), key=lambda x: x[1])[0]
            description = db.get_strategy_description(dominant_strategy)

            result_message = format_results_message(results, dominant_strategy, description, user_name)
            keyboard = [[InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª-—Ä–µ—Ñ–ª–µ–∫—Å–∏—é", callback_data="download_file")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(result_message, reply_markup=reply_markup)
            db.mark_test_completed(user_id)
            logger.info(f"Test completed for user {user_id}")
            return

        await send_question(update.message, current_q, questions)
    except Exception as e:
        logger.error(f"Error in next_question_handler: {str(e)}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        query = update.callback_query
        await query.answer()

        user_id = update.effective_user.id
        user_name = update.effective_user.first_name or "–≥–æ—Å—Ç—å"
        session = db.get_user_session(user_id)
        logger.info(f"Button pressed by user {user_id}: {query.data}")

        if not session:
            await query.message.reply_text(f"{user_name}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Ç–µ—Å—Ç —Å –∫–æ–º–∞–Ω–¥—ã /start")
            return

        questions = db.get_questions()
        current_q = session["current_question"]

        if query.data.startswith("answer_"):
            answer = int(query.data.split("_")[1])
            db.save_answer(user_id, current_q, answer)
            session["current_question"] += 1

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–±–∞–¥—Ä–∏–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 3 –æ—Ç–≤–µ—Ç–∞
            if session["current_question"] < len(questions):
                if (current_q + 1) % 3 == 0:  # –∫–∞–∂–¥—ã–π —Ç—Ä–µ—Ç–∏–π –æ—Ç–≤–µ—Ç
                    encouragement = random.choice(ENCOURAGEMENT_MESSAGES)
                    await query.message.reply_text(encouragement)
                await send_question(query.message, session["current_question"], questions)
            else:
                await show_progress_animation(query.message)
                results = calculate_results(session["answers"], questions)
                dominant_strategy = max(results.items(), key=lambda x: x[1])[0]
                description = db.get_strategy_description(dominant_strategy)

                result_message = format_results_message(results, dominant_strategy, description, user_name)
                keyboard = [[InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª-—Ä–µ—Ñ–ª–µ–∫—Å–∏—é", callback_data="download_file")]]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await query.message.reply_text(result_message, reply_markup=reply_markup)
                db.mark_test_completed(user_id)
                logger.info(f"Test completed for user {user_id}")

        elif query.data == "download_file":
            await query.message.reply_text(
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º! –°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ –º–æ–∏—Ö —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö:\n\n"
                "Telegram: @zoyaskobeltsyna\n"
                "Telegram-–∫–∞–Ω–∞–ª: @walktochange"
            )
            logger.info(f"Download file requested by user {user_id}")
    except Exception as e:
        logger.error(f"Error in button_handler: {str(e)}", exc_info=True)
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

async def admin_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        user_id = update.effective_user.id
        user_name = update.effective_user.first_name or "–≥–æ—Å—Ç—å"
        logger.info(f"Admin command received from user {user_id}")

        if not db.is_admin(user_id):
            await update.message.reply_text(f"{user_name}, —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return

        stats = db.get_statistics()
        stats_message = (
            f"üìä {user_name}, –≤–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞:\n\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            f"–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {stats['completed_tests']}"
        )
        await update.message.reply_text(stats_message)
        logger.info(f"Admin stats sent to user {user_id}")
    except Exception as e:
        logger.error(f"Error in admin_handler: {str(e)}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")